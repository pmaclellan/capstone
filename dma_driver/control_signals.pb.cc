// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_signals.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "control_signals.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* StartRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SampleRateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SampleRateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensitivityRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensitivityRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SensitivityRequest_Voltage_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_control_5fsignals_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_control_5fsignals_2eproto() {
  protobuf_AddDesc_control_5fsignals_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "control_signals.proto");
  GOOGLE_CHECK(file != NULL);
  StartRequest_descriptor_ = file->message_type(0);
  static const int StartRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRequest, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRequest, channels_),
  };
  StartRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StartRequest_descriptor_,
      StartRequest::internal_default_instance(),
      StartRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(StartRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRequest, _internal_metadata_));
  StopRequest_descriptor_ = file->message_type(1);
  static const int StopRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopRequest, port_),
  };
  StopRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopRequest_descriptor_,
      StopRequest::internal_default_instance(),
      StopRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(StopRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopRequest, _internal_metadata_));
  SampleRateRequest_descriptor_ = file->message_type(2);
  static const int SampleRateRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRateRequest, rate_),
  };
  SampleRateRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SampleRateRequest_descriptor_,
      SampleRateRequest::internal_default_instance(),
      SampleRateRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SampleRateRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRateRequest, _internal_metadata_));
  SensitivityRequest_descriptor_ = file->message_type(3);
  static const int SensitivityRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensitivityRequest, voltage_),
  };
  SensitivityRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SensitivityRequest_descriptor_,
      SensitivityRequest::internal_default_instance(),
      SensitivityRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SensitivityRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensitivityRequest, _internal_metadata_));
  SensitivityRequest_Voltage_descriptor_ = SensitivityRequest_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_control_5fsignals_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StartRequest_descriptor_, StartRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopRequest_descriptor_, StopRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SampleRateRequest_descriptor_, SampleRateRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SensitivityRequest_descriptor_, SensitivityRequest::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_control_5fsignals_2eproto() {
  StartRequest_default_instance_.Shutdown();
  delete StartRequest_reflection_;
  StopRequest_default_instance_.Shutdown();
  delete StopRequest_reflection_;
  SampleRateRequest_default_instance_.Shutdown();
  delete SampleRateRequest_reflection_;
  SensitivityRequest_default_instance_.Shutdown();
  delete SensitivityRequest_reflection_;
}

void protobuf_InitDefaults_control_5fsignals_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  StartRequest_default_instance_.DefaultConstruct();
  StopRequest_default_instance_.DefaultConstruct();
  SampleRateRequest_default_instance_.DefaultConstruct();
  SensitivityRequest_default_instance_.DefaultConstruct();
  StartRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  StopRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SampleRateRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SensitivityRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_control_5fsignals_2eproto_once_);
void protobuf_InitDefaults_control_5fsignals_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_control_5fsignals_2eproto_once_,
                 &protobuf_InitDefaults_control_5fsignals_2eproto_impl);
}
void protobuf_AddDesc_control_5fsignals_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_control_5fsignals_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025control_signals.proto\".\n\014StartRequest\022"
    "\014\n\004port\030\001 \001(\r\022\020\n\010channels\030\002 \001(\r\"\033\n\013StopR"
    "equest\022\014\n\004port\030\001 \001(\r\"!\n\021SampleRateReques"
    "t\022\014\n\004rate\030\001 \001(\005\"j\n\022SensitivityRequest\022,\n"
    "\007voltage\030\001 \001(\0162\033.SensitivityRequest.Volt"
    "age\"&\n\007Voltage\022\010\n\004FIVE\020\000\022\007\n\003TEN\020\001\022\010\n\004VRE"
    "F\020\002b\006proto3", 251);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "control_signals.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_control_5fsignals_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_control_5fsignals_2eproto_once_);
void protobuf_AddDesc_control_5fsignals_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_control_5fsignals_2eproto_once_,
                 &protobuf_AddDesc_control_5fsignals_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_control_5fsignals_2eproto {
  StaticDescriptorInitializer_control_5fsignals_2eproto() {
    protobuf_AddDesc_control_5fsignals_2eproto();
  }
} static_descriptor_initializer_control_5fsignals_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartRequest::kPortFieldNumber;
const int StartRequest::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartRequest::StartRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_control_5fsignals_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:StartRequest)
}

void StartRequest::InitAsDefaultInstance() {
}

StartRequest::StartRequest(const StartRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StartRequest)
}

void StartRequest::SharedCtor() {
  ::memset(&port_, 0, reinterpret_cast<char*>(&channels_) -
    reinterpret_cast<char*>(&port_) + sizeof(channels_));
  _cached_size_ = 0;
}

StartRequest::~StartRequest() {
  // @@protoc_insertion_point(destructor:StartRequest)
  SharedDtor();
}

void StartRequest::SharedDtor() {
}

void StartRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartRequest_descriptor_;
}

const StartRequest& StartRequest::default_instance() {
  protobuf_InitDefaults_control_5fsignals_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StartRequest> StartRequest_default_instance_;

StartRequest* StartRequest::New(::google::protobuf::Arena* arena) const {
  StartRequest* n = new StartRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StartRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StartRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StartRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(port_, channels_);

#undef ZR_HELPER_
#undef ZR_

}

bool StartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StartRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 port = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channels;
        break;
      }

      // optional uint32 channels = 2;
      case 2: {
        if (tag == 16) {
         parse_channels:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StartRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StartRequest)
  return false;
#undef DO_
}

void StartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StartRequest)
  // optional uint32 port = 1;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port(), output);
  }

  // optional uint32 channels = 2;
  if (this->channels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channels(), output);
  }

  // @@protoc_insertion_point(serialize_end:StartRequest)
}

::google::protobuf::uint8* StartRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StartRequest)
  // optional uint32 port = 1;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port(), target);
  }

  // optional uint32 channels = 2;
  if (this->channels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channels(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:StartRequest)
  return target;
}

size_t StartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartRequest)
  size_t total_size = 0;

  // optional uint32 port = 1;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // optional uint32 channels = 2;
  if (this->channels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channels());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StartRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StartRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StartRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StartRequest)
    UnsafeMergeFrom(*source);
  }
}

void StartRequest::MergeFrom(const StartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StartRequest::UnsafeMergeFrom(const StartRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.channels() != 0) {
    set_channels(from.channels());
  }
}

void StartRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartRequest::CopyFrom(const StartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StartRequest::IsInitialized() const {

  return true;
}

void StartRequest::Swap(StartRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartRequest::InternalSwap(StartRequest* other) {
  std::swap(port_, other->port_);
  std::swap(channels_, other->channels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartRequest_descriptor_;
  metadata.reflection = StartRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartRequest

// optional uint32 port = 1;
void StartRequest::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 StartRequest::port() const {
  // @@protoc_insertion_point(field_get:StartRequest.port)
  return port_;
}
void StartRequest::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:StartRequest.port)
}

// optional uint32 channels = 2;
void StartRequest::clear_channels() {
  channels_ = 0u;
}
::google::protobuf::uint32 StartRequest::channels() const {
  // @@protoc_insertion_point(field_get:StartRequest.channels)
  return channels_;
}
void StartRequest::set_channels(::google::protobuf::uint32 value) {
  
  channels_ = value;
  // @@protoc_insertion_point(field_set:StartRequest.channels)
}

inline const StartRequest* StartRequest::internal_default_instance() {
  return &StartRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopRequest::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopRequest::StopRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_control_5fsignals_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:StopRequest)
}

void StopRequest::InitAsDefaultInstance() {
}

StopRequest::StopRequest(const StopRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StopRequest)
}

void StopRequest::SharedCtor() {
  port_ = 0u;
  _cached_size_ = 0;
}

StopRequest::~StopRequest() {
  // @@protoc_insertion_point(destructor:StopRequest)
  SharedDtor();
}

void StopRequest::SharedDtor() {
}

void StopRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopRequest_descriptor_;
}

const StopRequest& StopRequest::default_instance() {
  protobuf_InitDefaults_control_5fsignals_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StopRequest> StopRequest_default_instance_;

StopRequest* StopRequest::New(::google::protobuf::Arena* arena) const {
  StopRequest* n = new StopRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StopRequest)
  port_ = 0u;
}

bool StopRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StopRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 port = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StopRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StopRequest)
  return false;
#undef DO_
}

void StopRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StopRequest)
  // optional uint32 port = 1;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:StopRequest)
}

::google::protobuf::uint8* StopRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StopRequest)
  // optional uint32 port = 1;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:StopRequest)
  return target;
}

size_t StopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StopRequest)
  size_t total_size = 0;

  // optional uint32 port = 1;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StopRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StopRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StopRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StopRequest)
    UnsafeMergeFrom(*source);
  }
}

void StopRequest::MergeFrom(const StopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StopRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StopRequest::UnsafeMergeFrom(const StopRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void StopRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopRequest::CopyFrom(const StopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StopRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StopRequest::IsInitialized() const {

  return true;
}

void StopRequest::Swap(StopRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopRequest::InternalSwap(StopRequest* other) {
  std::swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopRequest_descriptor_;
  metadata.reflection = StopRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopRequest

// optional uint32 port = 1;
void StopRequest::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 StopRequest::port() const {
  // @@protoc_insertion_point(field_get:StopRequest.port)
  return port_;
}
void StopRequest::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:StopRequest.port)
}

inline const StopRequest* StopRequest::internal_default_instance() {
  return &StopRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SampleRateRequest::kRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SampleRateRequest::SampleRateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_control_5fsignals_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SampleRateRequest)
}

void SampleRateRequest::InitAsDefaultInstance() {
}

SampleRateRequest::SampleRateRequest(const SampleRateRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SampleRateRequest)
}

void SampleRateRequest::SharedCtor() {
  rate_ = 0;
  _cached_size_ = 0;
}

SampleRateRequest::~SampleRateRequest() {
  // @@protoc_insertion_point(destructor:SampleRateRequest)
  SharedDtor();
}

void SampleRateRequest::SharedDtor() {
}

void SampleRateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleRateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SampleRateRequest_descriptor_;
}

const SampleRateRequest& SampleRateRequest::default_instance() {
  protobuf_InitDefaults_control_5fsignals_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SampleRateRequest> SampleRateRequest_default_instance_;

SampleRateRequest* SampleRateRequest::New(::google::protobuf::Arena* arena) const {
  SampleRateRequest* n = new SampleRateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SampleRateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SampleRateRequest)
  rate_ = 0;
}

bool SampleRateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SampleRateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rate = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SampleRateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SampleRateRequest)
  return false;
#undef DO_
}

void SampleRateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SampleRateRequest)
  // optional int32 rate = 1;
  if (this->rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rate(), output);
  }

  // @@protoc_insertion_point(serialize_end:SampleRateRequest)
}

::google::protobuf::uint8* SampleRateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SampleRateRequest)
  // optional int32 rate = 1;
  if (this->rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SampleRateRequest)
  return target;
}

size_t SampleRateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SampleRateRequest)
  size_t total_size = 0;

  // optional int32 rate = 1;
  if (this->rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleRateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SampleRateRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SampleRateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SampleRateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SampleRateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SampleRateRequest)
    UnsafeMergeFrom(*source);
  }
}

void SampleRateRequest::MergeFrom(const SampleRateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SampleRateRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SampleRateRequest::UnsafeMergeFrom(const SampleRateRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.rate() != 0) {
    set_rate(from.rate());
  }
}

void SampleRateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SampleRateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleRateRequest::CopyFrom(const SampleRateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SampleRateRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SampleRateRequest::IsInitialized() const {

  return true;
}

void SampleRateRequest::Swap(SampleRateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SampleRateRequest::InternalSwap(SampleRateRequest* other) {
  std::swap(rate_, other->rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SampleRateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SampleRateRequest_descriptor_;
  metadata.reflection = SampleRateRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SampleRateRequest

// optional int32 rate = 1;
void SampleRateRequest::clear_rate() {
  rate_ = 0;
}
::google::protobuf::int32 SampleRateRequest::rate() const {
  // @@protoc_insertion_point(field_get:SampleRateRequest.rate)
  return rate_;
}
void SampleRateRequest::set_rate(::google::protobuf::int32 value) {
  
  rate_ = value;
  // @@protoc_insertion_point(field_set:SampleRateRequest.rate)
}

inline const SampleRateRequest* SampleRateRequest::internal_default_instance() {
  return &SampleRateRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SensitivityRequest_Voltage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensitivityRequest_Voltage_descriptor_;
}
bool SensitivityRequest_Voltage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SensitivityRequest_Voltage SensitivityRequest::FIVE;
const SensitivityRequest_Voltage SensitivityRequest::TEN;
const SensitivityRequest_Voltage SensitivityRequest::VREF;
const SensitivityRequest_Voltage SensitivityRequest::Voltage_MIN;
const SensitivityRequest_Voltage SensitivityRequest::Voltage_MAX;
const int SensitivityRequest::Voltage_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensitivityRequest::kVoltageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensitivityRequest::SensitivityRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_control_5fsignals_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SensitivityRequest)
}

void SensitivityRequest::InitAsDefaultInstance() {
}

SensitivityRequest::SensitivityRequest(const SensitivityRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SensitivityRequest)
}

void SensitivityRequest::SharedCtor() {
  voltage_ = 0;
  _cached_size_ = 0;
}

SensitivityRequest::~SensitivityRequest() {
  // @@protoc_insertion_point(destructor:SensitivityRequest)
  SharedDtor();
}

void SensitivityRequest::SharedDtor() {
}

void SensitivityRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensitivityRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensitivityRequest_descriptor_;
}

const SensitivityRequest& SensitivityRequest::default_instance() {
  protobuf_InitDefaults_control_5fsignals_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SensitivityRequest> SensitivityRequest_default_instance_;

SensitivityRequest* SensitivityRequest::New(::google::protobuf::Arena* arena) const {
  SensitivityRequest* n = new SensitivityRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensitivityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SensitivityRequest)
  voltage_ = 0;
}

bool SensitivityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SensitivityRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SensitivityRequest.Voltage voltage = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_voltage(static_cast< ::SensitivityRequest_Voltage >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SensitivityRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SensitivityRequest)
  return false;
#undef DO_
}

void SensitivityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SensitivityRequest)
  // optional .SensitivityRequest.Voltage voltage = 1;
  if (this->voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->voltage(), output);
  }

  // @@protoc_insertion_point(serialize_end:SensitivityRequest)
}

::google::protobuf::uint8* SensitivityRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SensitivityRequest)
  // optional .SensitivityRequest.Voltage voltage = 1;
  if (this->voltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->voltage(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SensitivityRequest)
  return target;
}

size_t SensitivityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SensitivityRequest)
  size_t total_size = 0;

  // optional .SensitivityRequest.Voltage voltage = 1;
  if (this->voltage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->voltage());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensitivityRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SensitivityRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SensitivityRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensitivityRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SensitivityRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SensitivityRequest)
    UnsafeMergeFrom(*source);
  }
}

void SensitivityRequest::MergeFrom(const SensitivityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SensitivityRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SensitivityRequest::UnsafeMergeFrom(const SensitivityRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.voltage() != 0) {
    set_voltage(from.voltage());
  }
}

void SensitivityRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SensitivityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensitivityRequest::CopyFrom(const SensitivityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SensitivityRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SensitivityRequest::IsInitialized() const {

  return true;
}

void SensitivityRequest::Swap(SensitivityRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensitivityRequest::InternalSwap(SensitivityRequest* other) {
  std::swap(voltage_, other->voltage_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensitivityRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensitivityRequest_descriptor_;
  metadata.reflection = SensitivityRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensitivityRequest

// optional .SensitivityRequest.Voltage voltage = 1;
void SensitivityRequest::clear_voltage() {
  voltage_ = 0;
}
::SensitivityRequest_Voltage SensitivityRequest::voltage() const {
  // @@protoc_insertion_point(field_get:SensitivityRequest.voltage)
  return static_cast< ::SensitivityRequest_Voltage >(voltage_);
}
void SensitivityRequest::set_voltage(::SensitivityRequest_Voltage value) {
  
  voltage_ = value;
  // @@protoc_insertion_point(field_set:SensitivityRequest.voltage)
}

inline const SensitivityRequest* SensitivityRequest::internal_default_instance() {
  return &SensitivityRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
