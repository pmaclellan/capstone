// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_signals.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "control_signals.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* StartRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensitivityRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensitivityRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SensitivityRequest_Voltage_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RequestWrapper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestWrapper_reflection_ = NULL;
struct RequestWrapperOneofInstance {
  const ::StartRequest* start_;
  const ::StopRequest* stop_;
  const ::SensitivityRequest* sens_;
}* RequestWrapper_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_control_5fsignals_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_control_5fsignals_2eproto() {
  protobuf_AddDesc_control_5fsignals_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "control_signals.proto");
  GOOGLE_CHECK(file != NULL);
  StartRequest_descriptor_ = file->message_type(0);
  static const int StartRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRequest, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRequest, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRequest, rate_),
  };
  StartRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StartRequest_descriptor_,
      StartRequest::internal_default_instance(),
      StartRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(StartRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRequest, _internal_metadata_));
  StopRequest_descriptor_ = file->message_type(1);
  static const int StopRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopRequest, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopRequest, channels_),
  };
  StopRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopRequest_descriptor_,
      StopRequest::internal_default_instance(),
      StopRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(StopRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopRequest, _internal_metadata_));
  SensitivityRequest_descriptor_ = file->message_type(2);
  static const int SensitivityRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensitivityRequest, voltage_),
  };
  SensitivityRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SensitivityRequest_descriptor_,
      SensitivityRequest::internal_default_instance(),
      SensitivityRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SensitivityRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensitivityRequest, _internal_metadata_));
  SensitivityRequest_Voltage_descriptor_ = SensitivityRequest_descriptor_->enum_type(0);
  RequestWrapper_descriptor_ = file->message_type(3);
  static const int RequestWrapper_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestWrapper, sequence_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RequestWrapper_default_oneof_instance_, start_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RequestWrapper_default_oneof_instance_, stop_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RequestWrapper_default_oneof_instance_, sens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestWrapper, msg_),
  };
  RequestWrapper_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestWrapper_descriptor_,
      RequestWrapper::internal_default_instance(),
      RequestWrapper_offsets_,
      -1,
      -1,
      -1,
      RequestWrapper_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestWrapper, _oneof_case_[0]),
      sizeof(RequestWrapper),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestWrapper, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_control_5fsignals_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StartRequest_descriptor_, StartRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopRequest_descriptor_, StopRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SensitivityRequest_descriptor_, SensitivityRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestWrapper_descriptor_, RequestWrapper::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_control_5fsignals_2eproto() {
  StartRequest_default_instance_.Shutdown();
  delete StartRequest_reflection_;
  StopRequest_default_instance_.Shutdown();
  delete StopRequest_reflection_;
  SensitivityRequest_default_instance_.Shutdown();
  delete SensitivityRequest_reflection_;
  RequestWrapper_default_instance_.Shutdown();
  delete RequestWrapper_default_oneof_instance_;
  delete RequestWrapper_reflection_;
}

void protobuf_InitDefaults_control_5fsignals_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  StartRequest_default_instance_.DefaultConstruct();
  StopRequest_default_instance_.DefaultConstruct();
  SensitivityRequest_default_instance_.DefaultConstruct();
  RequestWrapper_default_instance_.DefaultConstruct();
  RequestWrapper_default_oneof_instance_ = new RequestWrapperOneofInstance();
  StartRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  StopRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SensitivityRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RequestWrapper_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_control_5fsignals_2eproto_once_);
void protobuf_InitDefaults_control_5fsignals_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_control_5fsignals_2eproto_once_,
                 &protobuf_InitDefaults_control_5fsignals_2eproto_impl);
}
void protobuf_AddDesc_control_5fsignals_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_control_5fsignals_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025control_signals.proto\"<\n\014StartRequest\022"
    "\014\n\004port\030\001 \001(\r\022\020\n\010channels\030\002 \001(\r\022\014\n\004rate\030"
    "\003 \001(\r\"-\n\013StopRequest\022\014\n\004port\030\001 \001(\r\022\020\n\010ch"
    "annels\030\002 \001(\r\"j\n\022SensitivityRequest\022,\n\007vo"
    "ltage\030\001 \001(\0162\033.SensitivityRequest.Voltage"
    "\"&\n\007Voltage\022\010\n\004FIVE\020\000\022\007\n\003TEN\020\001\022\010\n\004VREF\020\002"
    "\"\214\001\n\016RequestWrapper\022\020\n\010sequence\030\001 \001(\r\022\036\n"
    "\005start\030\002 \001(\0132\r.StartRequestH\000\022\034\n\004stop\030\003 "
    "\001(\0132\014.StopRequestH\000\022#\n\004sens\030\004 \001(\0132\023.Sens"
    "itivityRequestH\000B\005\n\003msgb\006proto3", 391);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "control_signals.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_control_5fsignals_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_control_5fsignals_2eproto_once_);
void protobuf_AddDesc_control_5fsignals_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_control_5fsignals_2eproto_once_,
                 &protobuf_AddDesc_control_5fsignals_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_control_5fsignals_2eproto {
  StaticDescriptorInitializer_control_5fsignals_2eproto() {
    protobuf_AddDesc_control_5fsignals_2eproto();
  }
} static_descriptor_initializer_control_5fsignals_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartRequest::kPortFieldNumber;
const int StartRequest::kChannelsFieldNumber;
const int StartRequest::kRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartRequest::StartRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_control_5fsignals_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:StartRequest)
}

void StartRequest::InitAsDefaultInstance() {
}

StartRequest::StartRequest(const StartRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StartRequest)
}

void StartRequest::SharedCtor() {
  ::memset(&port_, 0, reinterpret_cast<char*>(&rate_) -
    reinterpret_cast<char*>(&port_) + sizeof(rate_));
  _cached_size_ = 0;
}

StartRequest::~StartRequest() {
  // @@protoc_insertion_point(destructor:StartRequest)
  SharedDtor();
}

void StartRequest::SharedDtor() {
}

void StartRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartRequest_descriptor_;
}

const StartRequest& StartRequest::default_instance() {
  protobuf_InitDefaults_control_5fsignals_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StartRequest> StartRequest_default_instance_;

StartRequest* StartRequest::New(::google::protobuf::Arena* arena) const {
  StartRequest* n = new StartRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StartRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StartRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StartRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(port_, rate_);

#undef ZR_HELPER_
#undef ZR_

}

bool StartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StartRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 port = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channels;
        break;
      }

      // optional uint32 channels = 2;
      case 2: {
        if (tag == 16) {
         parse_channels:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rate;
        break;
      }

      // optional uint32 rate = 3;
      case 3: {
        if (tag == 24) {
         parse_rate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StartRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StartRequest)
  return false;
#undef DO_
}

void StartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StartRequest)
  // optional uint32 port = 1;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port(), output);
  }

  // optional uint32 channels = 2;
  if (this->channels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channels(), output);
  }

  // optional uint32 rate = 3;
  if (this->rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rate(), output);
  }

  // @@protoc_insertion_point(serialize_end:StartRequest)
}

::google::protobuf::uint8* StartRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StartRequest)
  // optional uint32 port = 1;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port(), target);
  }

  // optional uint32 channels = 2;
  if (this->channels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channels(), target);
  }

  // optional uint32 rate = 3;
  if (this->rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:StartRequest)
  return target;
}

size_t StartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartRequest)
  size_t total_size = 0;

  // optional uint32 port = 1;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // optional uint32 channels = 2;
  if (this->channels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channels());
  }

  // optional uint32 rate = 3;
  if (this->rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StartRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StartRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StartRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StartRequest)
    UnsafeMergeFrom(*source);
  }
}

void StartRequest::MergeFrom(const StartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StartRequest::UnsafeMergeFrom(const StartRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.channels() != 0) {
    set_channels(from.channels());
  }
  if (from.rate() != 0) {
    set_rate(from.rate());
  }
}

void StartRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartRequest::CopyFrom(const StartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StartRequest::IsInitialized() const {

  return true;
}

void StartRequest::Swap(StartRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartRequest::InternalSwap(StartRequest* other) {
  std::swap(port_, other->port_);
  std::swap(channels_, other->channels_);
  std::swap(rate_, other->rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartRequest_descriptor_;
  metadata.reflection = StartRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartRequest

// optional uint32 port = 1;
void StartRequest::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 StartRequest::port() const {
  // @@protoc_insertion_point(field_get:StartRequest.port)
  return port_;
}
void StartRequest::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:StartRequest.port)
}

// optional uint32 channels = 2;
void StartRequest::clear_channels() {
  channels_ = 0u;
}
::google::protobuf::uint32 StartRequest::channels() const {
  // @@protoc_insertion_point(field_get:StartRequest.channels)
  return channels_;
}
void StartRequest::set_channels(::google::protobuf::uint32 value) {
  
  channels_ = value;
  // @@protoc_insertion_point(field_set:StartRequest.channels)
}

// optional uint32 rate = 3;
void StartRequest::clear_rate() {
  rate_ = 0u;
}
::google::protobuf::uint32 StartRequest::rate() const {
  // @@protoc_insertion_point(field_get:StartRequest.rate)
  return rate_;
}
void StartRequest::set_rate(::google::protobuf::uint32 value) {
  
  rate_ = value;
  // @@protoc_insertion_point(field_set:StartRequest.rate)
}

inline const StartRequest* StartRequest::internal_default_instance() {
  return &StartRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopRequest::kPortFieldNumber;
const int StopRequest::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopRequest::StopRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_control_5fsignals_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:StopRequest)
}

void StopRequest::InitAsDefaultInstance() {
}

StopRequest::StopRequest(const StopRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StopRequest)
}

void StopRequest::SharedCtor() {
  ::memset(&port_, 0, reinterpret_cast<char*>(&channels_) -
    reinterpret_cast<char*>(&port_) + sizeof(channels_));
  _cached_size_ = 0;
}

StopRequest::~StopRequest() {
  // @@protoc_insertion_point(destructor:StopRequest)
  SharedDtor();
}

void StopRequest::SharedDtor() {
}

void StopRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopRequest_descriptor_;
}

const StopRequest& StopRequest::default_instance() {
  protobuf_InitDefaults_control_5fsignals_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StopRequest> StopRequest_default_instance_;

StopRequest* StopRequest::New(::google::protobuf::Arena* arena) const {
  StopRequest* n = new StopRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StopRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StopRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StopRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(port_, channels_);

#undef ZR_HELPER_
#undef ZR_

}

bool StopRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StopRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 port = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channels;
        break;
      }

      // optional uint32 channels = 2;
      case 2: {
        if (tag == 16) {
         parse_channels:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StopRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StopRequest)
  return false;
#undef DO_
}

void StopRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StopRequest)
  // optional uint32 port = 1;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port(), output);
  }

  // optional uint32 channels = 2;
  if (this->channels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channels(), output);
  }

  // @@protoc_insertion_point(serialize_end:StopRequest)
}

::google::protobuf::uint8* StopRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StopRequest)
  // optional uint32 port = 1;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port(), target);
  }

  // optional uint32 channels = 2;
  if (this->channels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channels(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:StopRequest)
  return target;
}

size_t StopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StopRequest)
  size_t total_size = 0;

  // optional uint32 port = 1;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // optional uint32 channels = 2;
  if (this->channels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channels());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StopRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StopRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StopRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StopRequest)
    UnsafeMergeFrom(*source);
  }
}

void StopRequest::MergeFrom(const StopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StopRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StopRequest::UnsafeMergeFrom(const StopRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.channels() != 0) {
    set_channels(from.channels());
  }
}

void StopRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopRequest::CopyFrom(const StopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StopRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StopRequest::IsInitialized() const {

  return true;
}

void StopRequest::Swap(StopRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopRequest::InternalSwap(StopRequest* other) {
  std::swap(port_, other->port_);
  std::swap(channels_, other->channels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopRequest_descriptor_;
  metadata.reflection = StopRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopRequest

// optional uint32 port = 1;
void StopRequest::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 StopRequest::port() const {
  // @@protoc_insertion_point(field_get:StopRequest.port)
  return port_;
}
void StopRequest::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:StopRequest.port)
}

// optional uint32 channels = 2;
void StopRequest::clear_channels() {
  channels_ = 0u;
}
::google::protobuf::uint32 StopRequest::channels() const {
  // @@protoc_insertion_point(field_get:StopRequest.channels)
  return channels_;
}
void StopRequest::set_channels(::google::protobuf::uint32 value) {
  
  channels_ = value;
  // @@protoc_insertion_point(field_set:StopRequest.channels)
}

inline const StopRequest* StopRequest::internal_default_instance() {
  return &StopRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SensitivityRequest_Voltage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensitivityRequest_Voltage_descriptor_;
}
bool SensitivityRequest_Voltage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SensitivityRequest_Voltage SensitivityRequest::FIVE;
const SensitivityRequest_Voltage SensitivityRequest::TEN;
const SensitivityRequest_Voltage SensitivityRequest::VREF;
const SensitivityRequest_Voltage SensitivityRequest::Voltage_MIN;
const SensitivityRequest_Voltage SensitivityRequest::Voltage_MAX;
const int SensitivityRequest::Voltage_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensitivityRequest::kVoltageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensitivityRequest::SensitivityRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_control_5fsignals_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SensitivityRequest)
}

void SensitivityRequest::InitAsDefaultInstance() {
}

SensitivityRequest::SensitivityRequest(const SensitivityRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SensitivityRequest)
}

void SensitivityRequest::SharedCtor() {
  voltage_ = 0;
  _cached_size_ = 0;
}

SensitivityRequest::~SensitivityRequest() {
  // @@protoc_insertion_point(destructor:SensitivityRequest)
  SharedDtor();
}

void SensitivityRequest::SharedDtor() {
}

void SensitivityRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensitivityRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensitivityRequest_descriptor_;
}

const SensitivityRequest& SensitivityRequest::default_instance() {
  protobuf_InitDefaults_control_5fsignals_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SensitivityRequest> SensitivityRequest_default_instance_;

SensitivityRequest* SensitivityRequest::New(::google::protobuf::Arena* arena) const {
  SensitivityRequest* n = new SensitivityRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensitivityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SensitivityRequest)
  voltage_ = 0;
}

bool SensitivityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SensitivityRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SensitivityRequest.Voltage voltage = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_voltage(static_cast< ::SensitivityRequest_Voltage >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SensitivityRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SensitivityRequest)
  return false;
#undef DO_
}

void SensitivityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SensitivityRequest)
  // optional .SensitivityRequest.Voltage voltage = 1;
  if (this->voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->voltage(), output);
  }

  // @@protoc_insertion_point(serialize_end:SensitivityRequest)
}

::google::protobuf::uint8* SensitivityRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SensitivityRequest)
  // optional .SensitivityRequest.Voltage voltage = 1;
  if (this->voltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->voltage(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SensitivityRequest)
  return target;
}

size_t SensitivityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SensitivityRequest)
  size_t total_size = 0;

  // optional .SensitivityRequest.Voltage voltage = 1;
  if (this->voltage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->voltage());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensitivityRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SensitivityRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SensitivityRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensitivityRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SensitivityRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SensitivityRequest)
    UnsafeMergeFrom(*source);
  }
}

void SensitivityRequest::MergeFrom(const SensitivityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SensitivityRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SensitivityRequest::UnsafeMergeFrom(const SensitivityRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.voltage() != 0) {
    set_voltage(from.voltage());
  }
}

void SensitivityRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SensitivityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensitivityRequest::CopyFrom(const SensitivityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SensitivityRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SensitivityRequest::IsInitialized() const {

  return true;
}

void SensitivityRequest::Swap(SensitivityRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensitivityRequest::InternalSwap(SensitivityRequest* other) {
  std::swap(voltage_, other->voltage_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensitivityRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensitivityRequest_descriptor_;
  metadata.reflection = SensitivityRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensitivityRequest

// optional .SensitivityRequest.Voltage voltage = 1;
void SensitivityRequest::clear_voltage() {
  voltage_ = 0;
}
::SensitivityRequest_Voltage SensitivityRequest::voltage() const {
  // @@protoc_insertion_point(field_get:SensitivityRequest.voltage)
  return static_cast< ::SensitivityRequest_Voltage >(voltage_);
}
void SensitivityRequest::set_voltage(::SensitivityRequest_Voltage value) {
  
  voltage_ = value;
  // @@protoc_insertion_point(field_set:SensitivityRequest.voltage)
}

inline const SensitivityRequest* SensitivityRequest::internal_default_instance() {
  return &SensitivityRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestWrapper::kSequenceFieldNumber;
const int RequestWrapper::kStartFieldNumber;
const int RequestWrapper::kStopFieldNumber;
const int RequestWrapper::kSensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestWrapper::RequestWrapper()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_control_5fsignals_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:RequestWrapper)
}

void RequestWrapper::InitAsDefaultInstance() {
  RequestWrapper_default_oneof_instance_->start_ = const_cast< ::StartRequest*>(
      ::StartRequest::internal_default_instance());
  RequestWrapper_default_oneof_instance_->stop_ = const_cast< ::StopRequest*>(
      ::StopRequest::internal_default_instance());
  RequestWrapper_default_oneof_instance_->sens_ = const_cast< ::SensitivityRequest*>(
      ::SensitivityRequest::internal_default_instance());
}

RequestWrapper::RequestWrapper(const RequestWrapper& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RequestWrapper)
}

void RequestWrapper::SharedCtor() {
  sequence_ = 0u;
  clear_has_msg();
  _cached_size_ = 0;
}

RequestWrapper::~RequestWrapper() {
  // @@protoc_insertion_point(destructor:RequestWrapper)
  SharedDtor();
}

void RequestWrapper::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
}

void RequestWrapper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestWrapper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestWrapper_descriptor_;
}

const RequestWrapper& RequestWrapper::default_instance() {
  protobuf_InitDefaults_control_5fsignals_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RequestWrapper> RequestWrapper_default_instance_;

RequestWrapper* RequestWrapper::New(::google::protobuf::Arena* arena) const {
  RequestWrapper* n = new RequestWrapper;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestWrapper::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:RequestWrapper)
  switch (msg_case()) {
    case kStart: {
      delete msg_.start_;
      break;
    }
    case kStop: {
      delete msg_.stop_;
      break;
    }
    case kSens: {
      delete msg_.sens_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void RequestWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestWrapper)
  sequence_ = 0u;
  clear_msg();
}

bool RequestWrapper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RequestWrapper)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sequence = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start;
        break;
      }

      // optional .StartRequest start = 2;
      case 2: {
        if (tag == 18) {
         parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        goto after_sens;
        break;
      }

      // optional .StopRequest stop = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sens;
        break;
      }

      // optional .SensitivityRequest sens = 4;
      case 4: {
        if (tag == 34) {
         parse_sens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sens()));
        } else {
          goto handle_unusual;
        }
       after_sens:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RequestWrapper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RequestWrapper)
  return false;
#undef DO_
}

void RequestWrapper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RequestWrapper)
  // optional uint32 sequence = 1;
  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sequence(), output);
  }

  // optional .StartRequest start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *msg_.start_, output);
  }

  // optional .StopRequest stop = 3;
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *msg_.stop_, output);
  }

  // optional .SensitivityRequest sens = 4;
  if (has_sens()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *msg_.sens_, output);
  }

  // @@protoc_insertion_point(serialize_end:RequestWrapper)
}

::google::protobuf::uint8* RequestWrapper::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RequestWrapper)
  // optional uint32 sequence = 1;
  if (this->sequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sequence(), target);
  }

  // optional .StartRequest start = 2;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *msg_.start_, false, target);
  }

  // optional .StopRequest stop = 3;
  if (has_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *msg_.stop_, false, target);
  }

  // optional .SensitivityRequest sens = 4;
  if (has_sens()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *msg_.sens_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RequestWrapper)
  return target;
}

size_t RequestWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestWrapper)
  size_t total_size = 0;

  // optional uint32 sequence = 1;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sequence());
  }

  switch (msg_case()) {
    // optional .StartRequest start = 2;
    case kStart: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.start_);
      break;
    }
    // optional .StopRequest stop = 3;
    case kStop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.stop_);
      break;
    }
    // optional .SensitivityRequest sens = 4;
    case kSens: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.sens_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestWrapper::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RequestWrapper)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RequestWrapper* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestWrapper>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RequestWrapper)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RequestWrapper)
    UnsafeMergeFrom(*source);
  }
}

void RequestWrapper::MergeFrom(const RequestWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RequestWrapper)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RequestWrapper::UnsafeMergeFrom(const RequestWrapper& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.msg_case()) {
    case kStart: {
      mutable_start()->::StartRequest::MergeFrom(from.start());
      break;
    }
    case kStop: {
      mutable_stop()->::StopRequest::MergeFrom(from.stop());
      break;
    }
    case kSens: {
      mutable_sens()->::SensitivityRequest::MergeFrom(from.sens());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
}

void RequestWrapper::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RequestWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestWrapper::CopyFrom(const RequestWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestWrapper)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RequestWrapper::IsInitialized() const {

  return true;
}

void RequestWrapper::Swap(RequestWrapper* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestWrapper::InternalSwap(RequestWrapper* other) {
  std::swap(sequence_, other->sequence_);
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestWrapper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestWrapper_descriptor_;
  metadata.reflection = RequestWrapper_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestWrapper

// optional uint32 sequence = 1;
void RequestWrapper::clear_sequence() {
  sequence_ = 0u;
}
::google::protobuf::uint32 RequestWrapper::sequence() const {
  // @@protoc_insertion_point(field_get:RequestWrapper.sequence)
  return sequence_;
}
void RequestWrapper::set_sequence(::google::protobuf::uint32 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:RequestWrapper.sequence)
}

// optional .StartRequest start = 2;
bool RequestWrapper::has_start() const {
  return msg_case() == kStart;
}
void RequestWrapper::set_has_start() {
  _oneof_case_[0] = kStart;
}
void RequestWrapper::clear_start() {
  if (has_start()) {
    delete msg_.start_;
    clear_has_msg();
  }
}
 const ::StartRequest& RequestWrapper::start() const {
  // @@protoc_insertion_point(field_get:RequestWrapper.start)
  return has_start()
      ? *msg_.start_
      : ::StartRequest::default_instance();
}
::StartRequest* RequestWrapper::mutable_start() {
  if (!has_start()) {
    clear_msg();
    set_has_start();
    msg_.start_ = new ::StartRequest;
  }
  // @@protoc_insertion_point(field_mutable:RequestWrapper.start)
  return msg_.start_;
}
::StartRequest* RequestWrapper::release_start() {
  // @@protoc_insertion_point(field_release:RequestWrapper.start)
  if (has_start()) {
    clear_has_msg();
    ::StartRequest* temp = msg_.start_;
    msg_.start_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RequestWrapper::set_allocated_start(::StartRequest* start) {
  clear_msg();
  if (start) {
    set_has_start();
    msg_.start_ = start;
  }
  // @@protoc_insertion_point(field_set_allocated:RequestWrapper.start)
}

// optional .StopRequest stop = 3;
bool RequestWrapper::has_stop() const {
  return msg_case() == kStop;
}
void RequestWrapper::set_has_stop() {
  _oneof_case_[0] = kStop;
}
void RequestWrapper::clear_stop() {
  if (has_stop()) {
    delete msg_.stop_;
    clear_has_msg();
  }
}
 const ::StopRequest& RequestWrapper::stop() const {
  // @@protoc_insertion_point(field_get:RequestWrapper.stop)
  return has_stop()
      ? *msg_.stop_
      : ::StopRequest::default_instance();
}
::StopRequest* RequestWrapper::mutable_stop() {
  if (!has_stop()) {
    clear_msg();
    set_has_stop();
    msg_.stop_ = new ::StopRequest;
  }
  // @@protoc_insertion_point(field_mutable:RequestWrapper.stop)
  return msg_.stop_;
}
::StopRequest* RequestWrapper::release_stop() {
  // @@protoc_insertion_point(field_release:RequestWrapper.stop)
  if (has_stop()) {
    clear_has_msg();
    ::StopRequest* temp = msg_.stop_;
    msg_.stop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RequestWrapper::set_allocated_stop(::StopRequest* stop) {
  clear_msg();
  if (stop) {
    set_has_stop();
    msg_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:RequestWrapper.stop)
}

// optional .SensitivityRequest sens = 4;
bool RequestWrapper::has_sens() const {
  return msg_case() == kSens;
}
void RequestWrapper::set_has_sens() {
  _oneof_case_[0] = kSens;
}
void RequestWrapper::clear_sens() {
  if (has_sens()) {
    delete msg_.sens_;
    clear_has_msg();
  }
}
 const ::SensitivityRequest& RequestWrapper::sens() const {
  // @@protoc_insertion_point(field_get:RequestWrapper.sens)
  return has_sens()
      ? *msg_.sens_
      : ::SensitivityRequest::default_instance();
}
::SensitivityRequest* RequestWrapper::mutable_sens() {
  if (!has_sens()) {
    clear_msg();
    set_has_sens();
    msg_.sens_ = new ::SensitivityRequest;
  }
  // @@protoc_insertion_point(field_mutable:RequestWrapper.sens)
  return msg_.sens_;
}
::SensitivityRequest* RequestWrapper::release_sens() {
  // @@protoc_insertion_point(field_release:RequestWrapper.sens)
  if (has_sens()) {
    clear_has_msg();
    ::SensitivityRequest* temp = msg_.sens_;
    msg_.sens_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RequestWrapper::set_allocated_sens(::SensitivityRequest* sens) {
  clear_msg();
  if (sens) {
    set_has_sens();
    msg_.sens_ = sens;
  }
  // @@protoc_insertion_point(field_set_allocated:RequestWrapper.sens)
}

bool RequestWrapper::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void RequestWrapper::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
RequestWrapper::MsgCase RequestWrapper::msg_case() const {
  return RequestWrapper::MsgCase(_oneof_case_[0]);
}
inline const RequestWrapper* RequestWrapper::internal_default_instance() {
  return &RequestWrapper_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
